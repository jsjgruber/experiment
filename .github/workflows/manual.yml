# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
# TODO apt-source??? ---- do something about package version
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      INPUTPLATFORM:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'The platform to speciry to docker build, defaults to linux/arm64/v8'
        # Default value if no value is explicitly provided
        default: 'arm64'
        # Input has to be provided for the workflow to run
        required: false
      
      INPUTSOURCEIMAGE:
        description: 'The name of the debian based release we are building, defaults to ?'
        default: 'buildpack-deps'
        required: false

      INPUTRELEASE:
        description: 'The name of the release the input image is based on, defaults to stable'
        default: 'stable'
        required: false

      INPUTPACKAGENAME:
        description: 'Name of debian source package, defaults to repo name'
        default: ''
        required: false

      INPUTBUILDDEPENDENCIES:
        description: 'Additional build depencencies needed, defaults to sudo for testing'
        default: ''
        required: false

env: 
  SOURCE: https://salsa.debian.org/debian-hamradio-team/aprsdigi/-/archive/master/aprsdigi-master.tar.gz

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      IMAGE: "build-${{inputs.INPUTRELEASE}}-${{inputs.INPUTPLATFORM}}"
      PLATFORM: ${{inputs.INPUTPLATFORM}}
      SOURCEIMAGE: ${{inputs.INPUTSOURCEIMAGE}}
      RELEASE:     ${{inputs.INPUTRELEASE}}
      PACKAGENAME: ${{inputs.INPUTPACKAGENAME}}
      BUILDDEPENDENCIES: ${{inputs.INPUTBUILDDEPENDENCIES}}

# Below are the steps of this job
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        clean: false

    - name: Set up parameters
      run: |
        packagename=$PACKAGENAME
        echo 'here we go' $packagename
        [ -z $packagename ] && [ -r debian-source-packagename ] && \
            packagename=`head -n1 debian-source-packagename`
        [ -z $packagename ] && packagename=`basename $(pwd)`
        echo packagename is $packagename
        echo globalpackagename=$packagename >> $GITHUB_ENV

    - name: Enable qemu--static interpreter and preserve access to them
      run: |
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - name: Set up directories for building
      run: |
        mkdir -p results/package      
    - name: Create build.bash
      run: |
        packagename=${{ env.globalpackagename }}

        cat > build.bash <<EOF
        #!/bin/bash
        set -xe
        # Get the debian/ via apt-get source
        # First produce a deb-src line for every deb line in /etc/apt/sources.list
        cp /etc/apt/sources.list ../sources.list
        sed -e "s/^deb/deb-src/" </etc/apt/sources.list >>../sources.list \
         && mv ../sources.list /etc/apt/sources.list
        cd /results/package
        mkdir $packagename
        cd $packagename
        export DEBEMAIL=root@gh-rebuild
        apt-get update
        #apt-get source $packagename
        apt-get source aprsdigi
        cd ..
        cp -ar $packagename/*/debian ./debian-apt
        rm -rf $packagename/*
        # get a tar fromo salsa.debian.org via $SOURCE constant
        wget -qO - $SOURCE | tar xpz -C $packagename
        cp -ar $packagename/*/debian ./debian2
        rm -rf $packagename

        dch -R Github actions build from upstream
        echo debian/changelog -- 
        cat debian/changelog
        sed -i '1s/)/~build`date -u +"%Y%m%d%H%M%S" `)/' debian/changelog
        echo ----------- debian/changelog for this build -------------
        cat debian/changelog

        /usr/lib/pbuilder/pbuilder-satisfydepends --control debian/control

        dpkg-buildpackage -uc -us

        cp ./tuttut /results
        
        echo "The container's /results contents"
        ls -la /results

        # Temporary test
        file ./tuttut
        ./tuttut
        EOF

        # Make the build.bash file we created executible for the Docker run
        chmod +x build.bash

    - name: Create a Dockerfile and build an image
      run: |
        docker image list $IMAGE
        cat  > Dockerfile <<EOF
        #   buildpack-deps for focal
        FROM $SOURCEIMAGE:$RELEASE AS $IMAGE
        ADD build.bash /build.bash
        RUN apt-get update
        # RUN apt-get install -y build-essential debhelper sudo less pbuilder vim man
        RUN apt-get install -y build-essential debhelper devscripts \
         pbuilder aptitude $BUILDDEPENDENCIES
        RUN apt-get clean -y
        RUN mkdir -p /results/package
        WORKDIR /results/package
        CMD /bin/bash
        EOF

        docker build --platform $PLATFORM -t $IMAGE .
    - name: "**** Run the docker container ****"
        # our working directory with the package repo is the container's ./results/package
        # with the --mount option below
        # Our ./results maps to container's /results
        # It's trickey because the build puts its products into the project's parent directory
      run: |
        docker run --rm --privileged --mount type=bind,source=/home/runner/work/experiment/experiment/results,target=/results \
          --mount type=bind,source=/home/runner/work/experiment/experiment,target=/results/package \
          $IMAGE /build.bash
    - name: Check images
      run: docker image ls --all
    - name: Check for our image
      run: docker image ls $IMAGE
    - name: Upload results
      uses: actions/upload-artifact@v3
      with:
        name: results
        path: results/
        retention-days: 5